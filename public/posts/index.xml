<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Programación en JAVA</title>
    <link>https://victorponz.github.io/symfony-teoria/posts/</link>
    <description>Recent content in Posts on Programación en JAVA</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 01 Sep 2022 19:50:07 +0100</lastBuildDate>
    
	<atom:link href="https://victorponz.github.io/symfony-teoria/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Introducción</title>
      <link>https://victorponz.github.io/symfony-teoria/posts/introduccion/</link>
      <pubDate>Thu, 01 Sep 2022 19:50:07 +0100</pubDate>
      
      <guid>https://victorponz.github.io/symfony-teoria/posts/introduccion/</guid>
      <description>Symfony es un framework PHP para desarrollo de aplicaciones web así como un conjunto de componentes PHP para usar en tus proyectos.
Hasta ahora, hemos desarrollado todo nuestro código partiendo sólo de las herramientas que provee la librería PHP estándar: sesiones, headers, http request y response, bases de datos, redirecciones, urls limpias, etc. Hemos creado, además, nuestro propio patrón MVC para separar la lógica de negocio, de la vista (presentación) y del controlador y finalmente hemos usado el microframework Slim.</description>
    </item>
    
    <item>
      <title>Controller</title>
      <link>https://victorponz.github.io/symfony-teoria/posts/2022-09-03-controller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://victorponz.github.io/symfony-teoria/posts/2022-09-03-controller/</guid>
      <description>Un controlador es una función PHP creada por nosotros que lee información del objeto Request y crea y devuelve un objeto Response. La respuesta podría ser una página HTML, JSON, XML, una descarga de archivos, una redirección, un error 404 o cualquier otra cosa que puedas hacer. El controlador ejecuta cualquier lógica arbitraria que tu aplicación necesita para representar el contenido de una página.
En apartados anteriores hemos visto el uso básico de los controladores y cómo definir las rutas.</description>
    </item>
    
    <item>
      <title>Routing</title>
      <link>https://victorponz.github.io/symfony-teoria/posts/2022-09-02-routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://victorponz.github.io/symfony-teoria/posts/2022-09-02-routing/</guid>
      <description>A partir de ahora, vamos a usar anotaciones para definir las rutas. De esta forma es más sencillo ya que las tenemos definidas en el propio código php
Para ello, ve a la carpeta del proyecto y escribe este comando
composer require annotations En cualquier momento, podemos conocer qué rutas están definidas mediante el siguiente comando:
php bin/console debug:router La salida será parecida a esta: A partir de ahora ya no usaremos el archivo config/routes.</description>
    </item>
    
    <item>
      <title>Templates</title>
      <link>https://victorponz.github.io/symfony-teoria/posts/2022-09-05-templates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://victorponz.github.io/symfony-teoria/posts/2022-09-05-templates/</guid>
      <description>Como se explica en el apartado anterior, los controladores son los responsables de manejar cada solicitud que entre en una aplicación Symfony y por lo general, terminan representando una plantilla para generar los contenidos de respuesta.
En realidad, el controlador delega la mayor parte del trabajo pesado a otros lugares, por lo que ese código puede ser probado y reutilizado. Cuando un controlador necesita generar HTML, CSS o cualquier otro contenido, entrega el trabajo al motor de plantillas.</description>
    </item>
    
  </channel>
</rss>